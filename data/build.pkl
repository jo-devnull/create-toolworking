import* "source/*.pkl" as source

const json: FileOutput = new {
  value = null
  renderer = new JsonRenderer {}
}

function getModId(path: String) = path.split("/").last.split(".").first

function build() = new Mapping<String, FileOutput> {
  for (name, mod in source.toMap()) {
    for (path, recipe in mod.recipes) {
      [List("data", getModId(name), "recipes", "\(path).json").join("/")] = (json) {
        value = recipe
      }
    }

    for (path, tag in mod.tags) {
      [List("data", getModId(name), "tags", "\(path).json").join("/")] = (json) {
        value = tag
      }
    }
  }
}

function buildReplacements() = new Mapping<String, FileOutput> {
  ["data/oei/replacements/replacements.json"] {
    renderer = new JsonRenderer {}

    value {
      for (key, val in import("replace.pkl").toMap()) {
        for (item in val.items) {
          when (item is String) {
            new {
              matchItems { "\(val.from):\(item)" }
              resultItems = "\(val.to):\(item)"
            }
          } else {
            new {
              matchItems { "\(val.from):\(item[0])" }
              resultItems = "\(val.to):\(item[1])"
            }
          }
        }
      }
    }
  }
}

output {
  files {
    ...build()
    ...buildReplacements()
  }
}