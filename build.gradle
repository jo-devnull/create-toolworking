buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

tasks.register('cleanDatagenPkl', Delete) {
    delete 'src/generated/resources/data'
}

tasks.register('datagenPkl', Exec) {
    dependsOn {
        cleanDatagenPkl
    }

    executable 'pkl'
    args 'eval', '-m', 'src/generated/resources', 'data/build.pkl'
}

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets {
    main {
        ext.refMap = "${mod_id}.refmap.json"
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.ithundxr.dev/mirror" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly fg.deobf("maven.modrinth:jupiter:ZmYt4jjp")
    runtimeOnly fg.deobf("maven.modrinth:architectury-api:9.2.14+forge")
    runtimeOnly fg.deobf("maven.modrinth:one-enough-item:TkHRus8b")
    runtimeOnly fg.deobf("maven.modrinth:cloth-config:${cloth_config_version}")
    runtimeOnly fg.deobf("maven.modrinth:lychee:${lychee_version}")

    runtimeOnly fg.deobf("maven.modrinth:jei:${jei_version}")
    implementation fg.deobf("maven.modrinth:moonlight:${moonlight_version}")

    runtimeOnly fg.deobf("maven.modrinth:emi:${emi_version}")
    runtimeOnly fg.deobf("maven.modrinth:jade:${jade_version}")
    runtimeOnly fg.deobf("maven.modrinth:jade-addons-forge:${jade_addons_version}")

    runtimeOnly fg.deobf("maven.modrinth:embeddium:${embeddium_version}")
    implementation "io.github.llamalad7:mixinextras-forge:0.4.1"
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1")

    implementation fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    compileOnly fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")

    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("maven.modrinth:create-low-heated:${lowheated_version}")
    implementation fg.deobf("maven.modrinth:create-metallurgy:${metallurgy_version}")
    implementation fg.deobf("maven.modrinth:supplementaries:${supplementaries_version}")
    implementation fg.deobf("maven.modrinth:overgeared:${overgeared_version}")
    implementation fg.deobf("maven.modrinth:no-tree-punching:${notreepunching_version}")
    implementation fg.deobf("maven.modrinth:create-ironworks:${create_ironworks_version}")
    implementation fg.deobf("maven.modrinth:simply-swords:${simply_swords_version}")
}

tasks.named('processResources', ProcessResources).configure {
    dependsOn {
        datagenPkl
    }

    var replaceProperties = [
         minecraft_version       : minecraft_version, minecraft_version_range: minecraft_version_range,
         forge_version           : forge_version, forge_version_range: forge_version_range,
         loader_version_range    : loader_version_range,
         mod_id                  : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
         mod_authors             : mod_authors, mod_description: mod_description,

         create_version          : create_version,
         notreepunching_version  : notreepunching_version,
         supplementaries_version : supplementaries_version,
         lowheated_version       : lowheated_version,
         metallurgy_version      : metallurgy_version,
         overgeared_version      : overgeared_version,
         create_ironworks_version: create_ironworks_version,
         simply_swords_version   : simply_swords_version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'MixinConfigs'            : "${mod_id}.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
